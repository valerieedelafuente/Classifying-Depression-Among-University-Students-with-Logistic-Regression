geom_density(alpha = 0.4) +
labs(title = "Filled Kernel Density Estimate (2010 vs. 2019)",
x = "Life Expectancy",
y = "Density",
fill = "Year")
# Overlaid histograms (not recommended due to clutter)
ggplot(data_filtered, aes(x = Life.Expectancy, fill = as.factor(Year))) +
geom_histogram(aes(y = ..density..), binwidth = 2,
alpha = 0.5, position = "identity", color = "black") +
labs(title = "Overlaid Histograms (2010 vs. 2019)",
x = "Life Expectancy",
y = "Density",
fill = "Year")
data_filteredQ4 <- data %>% filter(Year == 2010)
View(data_filteredQ4)
data_filteredQ4 <- data %>% filter(Year == 2010)
# Plot density estimates for both years
ggplot(data_filteredQ4, aes(x = Life.Expectancy, color = as.factor(region))) +
geom_density() +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
# Plot density estimates for both years
ggplot(data_filteredQ4, aes(x = Life.Expectancy, color = as.factor(region))) +
geom_density(bw = 2.5) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
# Plot density estimates for both years
ggplot(data_filteredQ4, aes(x = Life.Expectancy, color = as.factor(region))) +
geom_density(bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.5,bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.3,bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25,bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25,bw = 3.5) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25,bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25,bw = 2.5) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25,bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25, bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25, bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region") +
xlim(min(data_filteredQ4$Life.Expectancy), max(data_filteredQ4$Life.Expectancy))
ggplot(data_filteredQ4, aes(x = Life.Expectancy, fill = as.factor(region))) +
geom_density(alpha = 0.25, bw = 3) +
labs(title = "Kernel Density Estimate of Life Expectancy by Region",
x = "Life Expectancy",
y = "Density",
color = "Region")
data %>% filter(Year == 2010, region == "Americas") %>%
select(Country.Name, Life.Expectancy) %>%
arrange(desc(Life.Expectancy))
data %>% filter(Year == 2010, region == "Americas") %>%
select(Country.Name, Life.Expectancy) %>%
arrange(Life.Expectancy)
data %>% filter(Country.Name == "Haiti") %>%
select(Country.Name, Year, Life.Expectancy) %>%
arrange(Life.Expectancy)
data %>% filter(Country.Name == "Haiti") %>%
select(Country.Name, Year, Life.Expectancy) %>%
arrange(Year)
data_mod1 <- data %>%
mutate(log_GDP_per_capita = log(GDP.per.capita))
# Filter data for 2010
data_2010 <- data_mod1 %>% filter(Year == 2010)
# Scatterplot
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
labs(title = "Scatterplot of Life Expectancy vs. GDP per Capita (2010)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
# Filter data for 2010
data_2010 <- data_mod1 %>% filter(Year == 2010)
# Scatterplot
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
labs(title = "Scatterplot of Life Expectancy vs. GDP per Capita (2010)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
# Scatterplot with LOESS smoothing
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "blue", se = FALSE) +
labs(title = "LOESS of Life Expectancy vs. GDP per Capita (2010)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
# Adjusting LOESS span
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE,
span = 0.3) + # More detailed fit
labs(title = "LOESS with Smaller Span (More Detail)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE,
span = 0.4) + # More detailed fit
labs(title = "LOESS with Smaller Span (More Detail)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE,
span = 0.35) +
labs(title = "LOESS with Smaller Span (More Detail)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE,
span = 0.35) +
labs(title = "LOESS with Best Span (Best Representation)",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", span = 0.2, color = "red", se = FALSE) +  # More localized fit
geom_smooth(method = "loess", span = 0.4, color = "blue", se = FALSE) +  # Medium localized fit
geom_smooth(method = "loess", span = 0.8, color = "green", se = FALSE) + # Smoother fit
labs(title = "Comparing Different LOESS Bandwidths",
x = "Log(GDP per Capita)",
y = "Life Expectancy")
ggplot(data_2010, aes(x = log_GDP_per_capita, y = Life.Expectancy,
color = region)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = "LOESS by Region (2010)",
x = "Log(GDP per Capita)",
y = "Life Expectancy",
color = "Region")
knitr::opts_chunk$set(echo = TRUE)
Rossi <- read_table("Rossi.txt")
library(readr)
library(tidyverse)
library(survival)
library(survminer)
Rossi <- read_table("Rossi.txt")
Rossi2 <- Rossi |>  pivot_longer(cols = starts_with("emp"),
names_to = "ewk", names_prefix = "emp",
values_to = "Employed", values_drop_na = TRUE)
Rossi <- read_table("Rossi.txt")
Rossi2 <- Rossi |>  pivot_longer(cols = starts_with("emp"),
names_to = "ewk", names_prefix = "emp",
values_to = "Employed", values_drop_na = TRUE)
View(Rossi)
View(Rossi2)
summary(coxph(Surv(week, arrest) ~ emp1, data = Rossi))
View(Rossi)
Rossi2 <- Rossi |>  pivot_longer(cols = starts_with("emp"),
names_to = "ewk", names_prefix = "emp",
values_to = "Employed", values_drop_na = TRUE)
Rossi2 <- Rossi |>  pivot_longer(cols = starts_with("emp"),
names_to = "ewk", names_prefix = "emp",
values_to = "Employed", values_drop_na = TRUE)
Rossi2 <- Rossi2 %>% mutate(stop = as.numeric(ewk),
start = stop - 1,
status = (week == stop) * (arrest == 1))
summary(coxph(Surv(start, stop, status) ~ Employed, data = Rossi2))
TimeModelRossi2 <- coxph(Surv(start, stop, status) ~ Employed, data = Rossi2)
summary(TimeModelRossi2)
exp(coef(TimeModelRossi2) + c(-1.96,1.96) * sqrt(TimeModelRossi2$var[1,1]))
AgeModelRossi2 <- coxph(Surv(start, stop, status) ~ mar + age + Employed,
data = Rossi2)
anova(AgeModelRossi2)
exp(coef(AgeModelRossi2) + c(-1.96,1.96) * sqrt(AgeModelRossi2$var[3,3]))
AgeModelRossi2 <- coxph(Surv(start, stop, status) ~ mar + age + Employed,
data = Rossi2)
anova(AgeModelRossi2)
exp(coef(AgeModelRossi2)[3] + c(-1.96,1.96) * sqrt(AgeModelRossi2$var[3,3]))
retire <- read.table('retire.txt', header = TRUE, skip = 2)
retire2 <- retire %>% mutate(time2 = time + 0.25 * (time == 0))
View(retire)
View(retire2)
split48retire <- survSplit(Surv(time2, death) ~ ageentry + gender,
data = retire2, cut = 48,
id = "ID", episode = "Episode")
head(split48retire)
View(retire)
retireModel <- coxph(Surv(tstart, time2, death) ~
ageentry + gender * strata(Episode),
data = split48retire)
summary(retireModel)
anova(retireModel)
retireModel <- coxph(Surv(tstart, time2, death) ~
ageentry + gender * strata(Episode),
data = split48retire)
retireModel2 <- coxph(Surv(tstart, time2, death) ~
gender * strata(Episode) + ageentry,
data = split48retire)
summary(retireModel)
anova(retireModel)
anova(retireModel2)
retireModel <- coxph(Surv(tstart, time2, death) ~
ageentry + gender * strata(Episode),
data = split48retire)
summary(retireModel)
anova(retireModel)
retireModel <- coxph(Surv(tstart, time2, death) ~
ageentry + gender * strata(Episode),
data = split48retire)
retireModel2 <- coxph(Surv(tstart, time2, death) ~ gender * strata(Episode),
data = split48retire)
summary(retireModel)
anova(retireModel)
anova(retireModel2)
summary(retireModel2)
summary(retireModel2)
anova(retireModel)
anova(retireModel2)
summary(retireModel2)
summary(retireModel)
retireModel <- coxph(Surv(tstart, time2, death) ~
ageentry + gender * strata(Episode),
data = split48retire)
summary(retireModel)
anova(retireModel)
exp(coef(retireModel)[2] * c(-1.96, 1.96) * sqrt(retireModel$var[2,2]))
exp(coef(retireModel)[2] + coef(retireModel)[3] + c(-1.96, 1.96) *
sqrt(retireModel$var[2,2] + retireModel$var[3,3] +
2 * retireModel$var[2,3]))
exp(coef(retireModel)[2] + c(-1.96, 1.96) * sqrt(retireModel$var[2,2]))
exp(coef(retireModel)[2] + coef(retireModel)[3] + c(-1.96, 1.96) *
sqrt(retireModel$var[2,2] + retireModel$var[3,3] +
2 * retireModel$var[2,3]))
shiny::runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
datasets::mtcars
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data(mtcars)
data(diamonds)
data(diamonds)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
library(ggplot2)
diamonds <- data("diamonds")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data(package = "palmerpenguins")
data(package = "palmerpenguins")
data(mtcars)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data("chickwts")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data("USArrests")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
View(trees)
data("cars")
View(cars)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data("airquality")
View(airquality)
data("airmiles")
data("ChickWeight")
View(ChickWeight)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data("mtcars")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
View(mtcars)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
library(bslib)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
install.packages("shinyBS")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
library(bslib)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
bsTooltip("sumStatsCheckbox",
"Click to display the summary function output for the main and optional variables",
placement = "right", trigger = "hover")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(survival)
library(survminer)
library(ggplot2)
GRACE1000 <- read_table("C:/Users/willi/OneDrive/Documents/GitHub/PSTAT175-Final/GRACE1000.dat", col_names = FALSE)
GRACE1000 <- GRACE1000 %>% select(-X10)
colnames(GRACE1000) <- c("id", "days", "death", "revasc", "revascdays", "los", "age", "sysbp", "stchange")
# Forward Stepwise Selection
# Possible covariates are revasc, revascdays, sysbp, age, stchange, los
revdays.mod <- coxph(Surv(days,death) ~ revascdays, data = GRACE1000)
age.mod <- coxph(Surv(days,death) ~ age, data = GRACE1000)
sysbp.mod <- coxph(Surv(days,death) ~ sysbp, data = GRACE1000)
stchange.mod <- coxph(Surv(days,death) ~ stchange, data = GRACE1000)
los.mod <- coxph(Surv(days,death) ~ los, data = GRACE1000)
revasc.mod <- coxph(Surv(days,death) ~ revasc, data = GRACE1000)
AIC(revdays.mod, age.mod, sysbp.mod, stchange.mod, los.mod, revasc.mod)
BIC(revdays.mod, age.mod, sysbp.mod, stchange.mod, los.mod, revasc.mod)
# Lowest AIC (4151.309) and BIC (4155.090) is age
age.revdays.mod <- coxph(Surv(days,death) ~ age + revascdays, data = GRACE1000)
age.sysbp.mod <- coxph(Surv(days,death) ~ age + sysbp, data = GRACE1000)
age.stchange.mod <- coxph(Surv(days,death) ~ age + stchange, data = GRACE1000)
age.los.mod <- coxph(Surv(days,death) ~ age + los, data = GRACE1000)
age.revasc.mod <- coxph(Surv(days,death) ~ age + revasc, data = GRACE1000)
AIC(age.revdays.mod, age.sysbp.mod, age.stchange.mod, age.los.mod, age.revasc.mod)
BIC(age.revdays.mod, age.sysbp.mod, age.stchange.mod, age.los.mod, age.revasc.mod)
# Lowest AIC (4043.699) and BIC (4051.261) is revascdays + age
revdays.age.sysbp.mod <- coxph(Surv(days,death) ~ revascdays + age + sysbp, data = GRACE1000)
revdays.age.stchange.mod <- coxph(Surv(days,death) ~ revascdays + age + stchange, data = GRACE1000)
revdays.age.los.mod <- coxph(Surv(days,death) ~ revascdays + age + los, data = GRACE1000)
revdays.age.revasc.mod <- coxph(Surv(days,death) ~ revascdays + age + revasc, data = GRACE1000)
AIC(revdays.age.sysbp.mod, revdays.age.stchange.mod, revdays.age.los.mod, revdays.age.revasc.mod)
BIC(revdays.age.sysbp.mod, revdays.age.stchange.mod, revdays.age.los.mod, revdays.age.revasc.mod)
# Lowest AIC (3701.919) and BIC (3713.261) is revasc + revascdays + age
revasc.revdays.age.sysbp.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + sysbp, data = GRACE1000)
revasc.revdays.age.stchange.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + stchange, data = GRACE1000)
revasc.revdays.age.los.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + los, data = GRACE1000)
AIC(revasc.revdays.age.sysbp.mod, revasc.revdays.age.stchange.mod, revasc.revdays.age.los.mod)
BIC(revasc.revdays.age.sysbp.mod, revasc.revdays.age.stchange.mod, revasc.revdays.age.los.mod)
# Lowest AIC (3697.444) and BIC (3712.567) is sysbp + revasc + revascdays + age
# very close to los with AIC of 3697.495 and BIC of 3712.618
sysbp.revasc.revdays.age.stchange.mod <- coxph(Surv(days,death) ~ sysbp + revasc + revascdays + age + stchange, data = GRACE1000)
sysbp.revasc.revdays.age.los.mod <- coxph(Surv(days,death) ~ sysbp + revasc + revascdays + age + los, data = GRACE1000)
AIC(sysbp.revasc.revdays.age.stchange.mod, sysbp.revasc.revdays.age.los.mod)
BIC(sysbp.revasc.revdays.age.stchange.mod, sysbp.revasc.revdays.age.los.mod)
# Lowest AIC (3696.180) and BIC (3711.925) is los + sysbp + revasc + revascdays + age
# See if stchange lowers AIC and BIC
all.mod <- coxph(Surv(days,death) ~ stchange + sysbp + los + revasc + revascdays + age, data = GRACE1000)
AIC(all.mod) # 3691.309 lowers
BIC(all.mod) # 3713.994 raises, stchange not needed by BIC criterion
# According to forward stepwise selection by AIC, the full model is the best model
# According to BIC, the model with all covariates except stchange is the best model
# Maybe go with BIC to not have all covariates?
ggsurvplot(survfit(Surv(days,death) ~ revasc, data = GRACE1000),
fun = "cloglog") +
labs(x = "log(Days)", y = "Complementary Log-Log",
title = "Log-Log Plot by Revasc")
# Seems very proportional, no assumptions violated
ggsurvplot(survfit(Surv(days,death) ~ stchange, data = GRACE1000),
fun = "cloglog") +
labs(x = "log(Days)", y = "Complementary Log-Log",
title = "Log-Log Plot by Stchange")
# also very parallel lines, no assumptions violated
cox.zph(sysbp.mod)
plot(cox.zph(sysbp.mod))
# The zph test gives a significant p-value which means sysbp violates
# proportional hazards assumption
cox.zph(los.mod)
plot(cox.zph(los.mod))
cox.zph(age.mod)
plot(cox.zph(age.mod))
cox.zph(revdays.mod)
plot(cox.zph(revdays.mod))
summary(revasc.mod)
revasc.mod$var
# Hazard ratio is exp(coef) = 0.4892
# means almost 50% less likely to die with revasc?
exp(coef(revasc.mod) + c(-1.96,1.96) * sqrt(revasc.mod$var[1,1]))
summary(stchange.mod)
revasc.strata.mod <- coxph(Surv(days,death) ~ strata(stchange) * revasc, data = GRACE1000)
summary(revasc.strata.mod)
revasc.strata.mod <- coxph(Surv(days,death) ~ strata(stchange) + revasc, data = GRACE1000)
summary(revasc.strata.mod)
# Hazard ratio = 1.6802
# means almost 70% mroe likelt to die with stchange?
exp(coef(stchange.mod) + c(-1.96,1.96) * sqrt(stchange.mod$var[1,1]))
# Revasc:
summary(revasc.mod)
# Hazard ratio is exp(coef) = 0.4892
# means almost 50% less likely to die with revasc?
exp(coef(revasc.mod) + c(-1.96,1.96) * sqrt(revasc.mod$var[1,1]))
# 95% confidence interval is [0.3909648, 0.6122096]
ggsurvplot(survfit(Surv(days,death) ~ 1, data = GRACE1000))
ggsurvplot(survfit(Surv(days,death) ~ revasc, data = GRACE1000))
