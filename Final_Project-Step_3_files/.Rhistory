runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
data("mtcars")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
View(mtcars)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
library(bslib)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
install.packages("shinyBS")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
library(bslib)
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
bsTooltip("sumStatsCheckbox",
"Click to display the summary function output for the main and optional variables",
placement = "right", trigger = "hover")
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
runApp('C:/Users/willi/OneDrive/Documents/GitHub/PSTAT-100-Project/Will-Mini-Project-2')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(survival)
library(survminer)
library(ggplot2)
GRACE1000 <- read_table("C:/Users/willi/OneDrive/Documents/GitHub/PSTAT175-Final/GRACE1000.dat", col_names = FALSE)
GRACE1000 <- GRACE1000 %>% select(-X10)
colnames(GRACE1000) <- c("id", "days", "death", "revasc", "revascdays", "los", "age", "sysbp", "stchange")
# Forward Stepwise Selection
# Possible covariates are revasc, revascdays, sysbp, age, stchange, los
revdays.mod <- coxph(Surv(days,death) ~ revascdays, data = GRACE1000)
age.mod <- coxph(Surv(days,death) ~ age, data = GRACE1000)
sysbp.mod <- coxph(Surv(days,death) ~ sysbp, data = GRACE1000)
stchange.mod <- coxph(Surv(days,death) ~ stchange, data = GRACE1000)
los.mod <- coxph(Surv(days,death) ~ los, data = GRACE1000)
revasc.mod <- coxph(Surv(days,death) ~ revasc, data = GRACE1000)
AIC(revdays.mod, age.mod, sysbp.mod, stchange.mod, los.mod, revasc.mod)
BIC(revdays.mod, age.mod, sysbp.mod, stchange.mod, los.mod, revasc.mod)
# Lowest AIC (4151.309) and BIC (4155.090) is age
age.revdays.mod <- coxph(Surv(days,death) ~ age + revascdays, data = GRACE1000)
age.sysbp.mod <- coxph(Surv(days,death) ~ age + sysbp, data = GRACE1000)
age.stchange.mod <- coxph(Surv(days,death) ~ age + stchange, data = GRACE1000)
age.los.mod <- coxph(Surv(days,death) ~ age + los, data = GRACE1000)
age.revasc.mod <- coxph(Surv(days,death) ~ age + revasc, data = GRACE1000)
AIC(age.revdays.mod, age.sysbp.mod, age.stchange.mod, age.los.mod, age.revasc.mod)
BIC(age.revdays.mod, age.sysbp.mod, age.stchange.mod, age.los.mod, age.revasc.mod)
# Lowest AIC (4043.699) and BIC (4051.261) is revascdays + age
revdays.age.sysbp.mod <- coxph(Surv(days,death) ~ revascdays + age + sysbp, data = GRACE1000)
revdays.age.stchange.mod <- coxph(Surv(days,death) ~ revascdays + age + stchange, data = GRACE1000)
revdays.age.los.mod <- coxph(Surv(days,death) ~ revascdays + age + los, data = GRACE1000)
revdays.age.revasc.mod <- coxph(Surv(days,death) ~ revascdays + age + revasc, data = GRACE1000)
AIC(revdays.age.sysbp.mod, revdays.age.stchange.mod, revdays.age.los.mod, revdays.age.revasc.mod)
BIC(revdays.age.sysbp.mod, revdays.age.stchange.mod, revdays.age.los.mod, revdays.age.revasc.mod)
# Lowest AIC (3701.919) and BIC (3713.261) is revasc + revascdays + age
revasc.revdays.age.sysbp.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + sysbp, data = GRACE1000)
revasc.revdays.age.stchange.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + stchange, data = GRACE1000)
revasc.revdays.age.los.mod <- coxph(Surv(days,death) ~ revasc + revascdays + age + los, data = GRACE1000)
AIC(revasc.revdays.age.sysbp.mod, revasc.revdays.age.stchange.mod, revasc.revdays.age.los.mod)
BIC(revasc.revdays.age.sysbp.mod, revasc.revdays.age.stchange.mod, revasc.revdays.age.los.mod)
# Lowest AIC (3697.444) and BIC (3712.567) is sysbp + revasc + revascdays + age
# very close to los with AIC of 3697.495 and BIC of 3712.618
sysbp.revasc.revdays.age.stchange.mod <- coxph(Surv(days,death) ~ sysbp + revasc + revascdays + age + stchange, data = GRACE1000)
sysbp.revasc.revdays.age.los.mod <- coxph(Surv(days,death) ~ sysbp + revasc + revascdays + age + los, data = GRACE1000)
AIC(sysbp.revasc.revdays.age.stchange.mod, sysbp.revasc.revdays.age.los.mod)
BIC(sysbp.revasc.revdays.age.stchange.mod, sysbp.revasc.revdays.age.los.mod)
# Lowest AIC (3696.180) and BIC (3711.925) is los + sysbp + revasc + revascdays + age
# See if stchange lowers AIC and BIC
all.mod <- coxph(Surv(days,death) ~ stchange + sysbp + los + revasc + revascdays + age, data = GRACE1000)
AIC(all.mod) # 3691.309 lowers
BIC(all.mod) # 3713.994 raises, stchange not needed by BIC criterion
# According to forward stepwise selection by AIC, the full model is the best model
# According to BIC, the model with all covariates except stchange is the best model
# Maybe go with BIC to not have all covariates?
ggsurvplot(survfit(Surv(days,death) ~ revasc, data = GRACE1000),
fun = "cloglog") +
labs(x = "log(Days)", y = "Complementary Log-Log",
title = "Log-Log Plot by Revasc")
# Seems very proportional, no assumptions violated
ggsurvplot(survfit(Surv(days,death) ~ stchange, data = GRACE1000),
fun = "cloglog") +
labs(x = "log(Days)", y = "Complementary Log-Log",
title = "Log-Log Plot by Stchange")
# also very parallel lines, no assumptions violated
cox.zph(sysbp.mod)
plot(cox.zph(sysbp.mod))
# The zph test gives a significant p-value which means sysbp violates
# proportional hazards assumption
cox.zph(los.mod)
plot(cox.zph(los.mod))
cox.zph(age.mod)
plot(cox.zph(age.mod))
cox.zph(revdays.mod)
plot(cox.zph(revdays.mod))
summary(revasc.mod)
revasc.mod$var
# Hazard ratio is exp(coef) = 0.4892
# means almost 50% less likely to die with revasc?
exp(coef(revasc.mod) + c(-1.96,1.96) * sqrt(revasc.mod$var[1,1]))
summary(stchange.mod)
revasc.strata.mod <- coxph(Surv(days,death) ~ strata(stchange) * revasc, data = GRACE1000)
summary(revasc.strata.mod)
revasc.strata.mod <- coxph(Surv(days,death) ~ strata(stchange) + revasc, data = GRACE1000)
summary(revasc.strata.mod)
# Hazard ratio = 1.6802
# means almost 70% mroe likelt to die with stchange?
exp(coef(stchange.mod) + c(-1.96,1.96) * sqrt(stchange.mod$var[1,1]))
# Revasc:
summary(revasc.mod)
# Hazard ratio is exp(coef) = 0.4892
# means almost 50% less likely to die with revasc?
exp(coef(revasc.mod) + c(-1.96,1.96) * sqrt(revasc.mod$var[1,1]))
# 95% confidence interval is [0.3909648, 0.6122096]
ggsurvplot(survfit(Surv(days,death) ~ 1, data = GRACE1000))
ggsurvplot(survfit(Surv(days,death) ~ revasc, data = GRACE1000))
install.packages("xfun")
library(cli)
detach("package:cli", unload = TRUE)
install.packages(c("cli", "rlang"))
install.packages("cli")
# Load necessary packages
library(readr)
library(tidyverse)
library(naniar)
library(janitor)
library(knitr)
library(rmarkdown)
#setwd("/Documents/PSTAT 100/finalproject/PSTAT-100-Project/")
# Load in the data
depression_data <- read.csv("student_depression_dataset.csv")
# Fix column names
depression_data <- depression_data %>%
clean_names() %>%
rename(
cum_gpa = cgpa,
suicidal_thoughts = have_you_ever_had_suicidal_thoughts,
fam_mental_illness = family_history_of_mental_illness
)
# Fixing the `financial_stress` variable
depression_data <- depression_data %>%
mutate(
financial_stress = as.numeric(financial_stress),
# convert string numbers to integers
financial_stress = case_when(
financial_stress == "?" ~ NA,
# convert "?" to NA values
.default = financial_stress))
# Remove 3 rows with NA values
depression_data <- depression_data %>% na.omit()
# Factorizing the `gender` variable
depression_data$gender <- factor(depression_data$gender)
# Fixing the `city` variable to change invalid entries
depression_data <- depression_data %>%
mutate(city = case_when(
city == "Khaziabad" ~ "Ghaziabad",
city == "Nalyan" ~ "Kalyan",
city == "'Less Delhi'" ~ "Delhi",
city == "'Less than 5 Kalyan'" ~ "Kalyan",
city == "3.0" ~ "Other",
city == "Saanvi" ~ "Other",
city == "M.Tech" ~ "Other",
city == "Bhavna" ~ "Other",
city == "City" ~ "Other",
city == "Mira" ~ "Other",
city == "Harsha" ~ "Other",
city == "Vaanya" ~ "Other",
city == "Gaurav" ~ "Other",
city == "Harsh" ~ "Other",
city == "Reyansh" ~ "Other",
city == "Kibara" ~ "Other",
city == "Rashi" ~ "Other",
city == "ME" ~ "Other",
city == "M.Com" ~ "Other",
city == "Mihir" ~ "Other",
city == "Nalini" ~ "Other",
city == "Nandini" ~ "Other",
TRUE ~ city  # Leave valid entries as they are
))
# # Fixing the `profession` variable to change invalid entries
depression_data <- depression_data %>%
mutate(profession = case_when(
profession == "'Civil Engineer'" ~ "Civil Engineer",
profession == "'UX/UI Designer'" ~ "UX/UI Designer",
profession == "'Digital Marketer'" ~ "Digital Marketer",
profession == "'Content Writer'" ~ "Content Writer",
profession == "'Educational Consultant'" ~ "Educational Consultant",
TRUE ~ profession # Leave valid entries as they are
))
# Fixing the `work_pressure` variable for proper scaling
depression_data <- depression_data %>%
mutate(work_pressure = case_when(
work_pressure == 0 ~ 0,
work_pressure == 2 ~ 1,
work_pressure == 5 ~ 3
))
# Fixing the `sleep_duration` variable to change invalid entries
depression_data <- depression_data %>%
mutate(sleep_duration = case_when(
sleep_duration == "'5-6 hours'" ~ "5-6 hours",
sleep_duration == "'Less than 5 hours'" ~ "Less than 5 hours",
sleep_duration == "'7-8 hours'" ~ "7-8 hours",
sleep_duration == "'More than 8 hours'" ~ "More than 8 hours",
sleep_duration == "Others" ~ "Other"
))
# Factorizing the `sleep_duration` variable
depression_data <- depression_data %>%
mutate(sleep_duration = factor(sleep_duration,
levels = c("Less than 5 hours",
"5-6 hours",
"7-8 hours",
"More than 8 hours",
"Other"),
ordered = TRUE))
# Fixing the `dietary_habits` variable to change misspelling
depression_data <- depression_data %>%
mutate(dietary_habits = case_when(
dietary_habits == "Others" ~ "Other",
TRUE ~ dietary_habits
))
# Factorizing the `dietary_habits` variable
depression_data <- depression_data %>%
mutate(dietary_habits = factor(dietary_habits,
levels = c("Healthy", "Moderate", "Unhealthy",
"Other"),
ordered = TRUE))
# Fixing the `degree` variable to change invalid entries
depression_data <- depression_data %>%
mutate(degree = case_when(
degree == "'Class 12'" ~ "High School",
degree == "Others" ~ "Other",
# Others could less than HS education or totally unknown.
.default = degree
))
# Factorizing the `degree variable`
degree_levels <- c(
"High School",
"BA", "BSc", "B.Com", "BCA", "B.Pharm", "B.Ed", "B.Tech", "BE", "BHM", "B.Arch", "BBA",
"MA", "MSc", "MBA", "M.Com", "MCA", "M.Tech", "M.Ed", "M.Pharm", "MHM",
"LLB", "LLM", "MD", "MBBS",
"PhD",
"Other"
)
depression_data <- depression_data %>%
mutate(degree = factor(degree, levels = degree_levels, ordered = TRUE))
# Factorizing the `suicidal_thoughts` variable
depression_data$suicidal_thoughts <- factor(depression_data$suicidal_thoughts)
# Factorizing the `fam_mental_illness` variable
depression_data$fam_mental_illness <- factor(depression_data$fam_mental_illness)
# Turning the `depression` variable back to "yes" and "no" for visualization purposes
depression_data <- depression_data %>%
mutate(depression = case_when(
depression == 0 ~ "No",
depression == 1 ~ "Yes"
))
# Factorizing the `depression` variable
depression_data$depression <- factor(depression_data$depression)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 16)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 24)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 32)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 40)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 50)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, digits = 100)
kable(logModelSum$coefficients, format = 'markdown', digits = 100)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 1000)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 10000)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 25)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 32)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 35)
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 42)
kable(logModelSum$coefficients, format = 'markdown', digits = 42,
row.names = c("Healthy","Moderate","Unhealthy","Other"))
kable(logModelSum$coefficients, format = 'markdown', digits = 42,
row.names = c("Healthy","Moderate","Unhealthy","Other"))
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = 'binomial')
kable(logModelSum$coefficients, format = 'markdown', digits = 42)
logModelSum
logModelSum$contrasts
logModelSum$df.residual
ggplot(aes(x = fitted(logModelSum), y=residuals(logModelSum, type = 'deviance')))
plot(fitted(logModelSum), y=residuals(logModelSum, type = 'deviance')))
plot(fitted(logModelSum), y=residuals(logModelSum, type = 'deviance'))
plot(fitted(logModelSum), y=residuals(logModelSum, type = 'pearson'))
fitted(logModelSum)
plot(fitted(dietHabitsModel), y=residuals(logModelSum, type = 'pearson'))
plot(fitted(dietHabitsModel), y=residuals(logModelSum, type = 'deviance'))
plot(hatvalues(dietHabitsModel))
plot(cooks.distance(dietHabitsModel))
influence.measures(dietHabitsModel)
plot(cooks.distance(dietHabitsModel))
plot(cooks.distance(dietHabitsModel))
plot(hatvalues(dietHabitsModel))
plot(fitted(dietHabitsModel))
plot(residuals(dietHabitsModel, type = 'deviance'))
plot(residuals(dietHabitsModel, type = 'pearson'))
plot(fitted(dietHabitsModel),residuals(dietHabitsModel, type = 'pearson'))
plot(fitted(dietHabitsModel),residuals(dietHabitsModel, type = 'deviance'))
plot(fitted(dietHabitsModel),residuals(dietHabitsModel, type = 'deviance'))
plot(fitted(dietHabitsModel),residuals(dietHabitsModel, type = 'pearson'))
plot(residuals(dietHabitsModel, type = 'pearson'))
plot(hatvalues(dietHabitsModel))
plot(cooks.distance(dietHabitsModel))
influence.measures(dietHabitsModel)
residuals(dietHabitsModel, type = 'deviance')
dietHabitsModel <- glm(depression ~ dietary_habits - 1, data = depression_data,
family = binomial(link = 'logit'))
logModelSum <- summary(dietHabitsModel)
kable(logModelSum$coefficients, format = 'markdown', digits = 42)
boxTidwell(dietHabitsModel$linear.predictors ~ depression_data$dietary_habits)
library(car)
boxTidwell(dietHabitsModel$linear.predictors ~ depression_data$dietary_habits)
plot(dietHabitsModel$linear.predictors ~ depression_data$dietary_habits)
anova(dietHabitsModel)
logModANOVA <- anova(dietHabitsModel)
logModANOVA
logModANOVA$Df
kable(logModANOVA)
kable(logModANOVA, digits = 50)
kable(logModANOVA, digits = 1000)
logModANOVA
#| label: setup
#| include: false
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE
)
#| echo: false
library(readr)
library(knitr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggplot2)
library(broom)
depression <- read_csv("student_depression_dataset.csv")
missing_table <- depression %>%
select(Depression,`Sleep Duration`) %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count")
kable(missing_table,caption="NA Values")
#| echo: false
#| layout-ncol: 2
sleeptable <- as.data.frame(table(depression$`Sleep Duration`))
colnames(sleeptable) <- c("Variable","Frequency")
depressiontable <- as.data.frame(table(depression$Depression))
colnames(depressiontable) <- c("Variable","Frequency")
kable(sleeptable,caption="Sleep Frequency")
kable(depressiontable,caption="Depression Frequency")
depression <- depression %>% filter(`Sleep Duration` != "Others")
depression$`Sleep Duration` <- as.numeric(factor(
depression$`Sleep Duration`, levels = c("'Less than 5 hours'", "'5-6 hours'", "'7-8 hours'",
"'More than 8 hours'")))
bin_summary <- depression %>%
group_by(`Sleep Duration`) %>%
summarize(
mean_depression = mean(Depression),
n = n(),
log_odds = log(mean_depression/(1-mean_depression))
) %>%
filter(!is.infinite(log_odds))
ggplot(bin_summary, aes(x = `Sleep Duration`, y = log_odds)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
scale_x_continuous(
breaks = c(1, 2, 3, 4),
labels = c("<5 hrs", "5-6 hrs", "7-8 hrs", ">8 hrs")
) +
labs(title = "Log-Odds vs. Sleep Duration", y = "Log-Odds", x = "Sleep Duration") +
theme_minimal()
depression <- depression %>% mutate(sleep_log = `Sleep Duration` * log(`Sleep Duration`))
model_bt <- glm(Depression~`Sleep Duration` + sleep_log, family=binomial,data=depression)
model_coef <- as.data.frame(summary(model_bt)$coefficients)
model_coef <- model_coef %>% select(-c(Estimate,`Std. Error`))
#| echo: false
library(readr)
library(knitr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(ggplot2)
library(broom)
depression <- read_csv("student_depression_dataset.csv")
missing_table <- depression %>%
select(Depression,`Sleep Duration`) %>%
summarise(across(everything(), ~sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Count")
kable(missing_table,caption="NA Values")
#| echo: false
#| layout-ncol: 2
sleeptable <- as.data.frame(table(depression$`Sleep Duration`))
colnames(sleeptable) <- c("Variable","Frequency")
depressiontable <- as.data.frame(table(depression$Depression))
colnames(depressiontable) <- c("Variable","Frequency")
kable(sleeptable,caption="Sleep Frequency")
kable(depressiontable,caption="Depression Frequency")
depression <- depression %>% filter(`Sleep Duration` != "Others")
